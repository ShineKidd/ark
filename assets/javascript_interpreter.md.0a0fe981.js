import{o as n,c as a,d as s}from"./app.d7e7aadc.js";const t='{"title":"JavaScript Interpreter","description":"","frontmatter":{"title":"JavaScript Interpreter"},"headers":[{"level":3,"title":"Hoisting","slug":"hoisting"},{"level":2,"title":"Execution Context","slug":"execution-context"},{"level":3,"title":"This","slug":"this"},{"level":2,"title":"Scope Chain","slug":"scope-chain"},{"level":2,"title":"Execution Stack","slug":"execution-stack"},{"level":3,"title":"variable environment","slug":"variable-environment"},{"level":3,"title":"lexical environment","slug":"lexical-environment"}],"relativePath":"javascript/interpreter.md","lastUpdated":1620227023151}',e={},o=s('<p>JavaScript 存在编译阶段么？</p><p>如下代码，打印的结果是？</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n</code></pre></div><p>交互 var 和 function 声明的顺序呢？</p><p>把 var 改成 let 呢？</p><h3 id="hoisting"><a class="header-anchor" href="#hoisting" aria-hidden="true">#</a> Hoisting</h3><p>var 声明的变量和 function 声明的函数</p><h2 id="execution-context"><a class="header-anchor" href="#execution-context" aria-hidden="true">#</a> Execution Context</h2><h3 id="this"><a class="header-anchor" href="#this" aria-hidden="true">#</a> This</h3><p>runtime binding</p><h2 id="scope-chain"><a class="header-anchor" href="#scope-chain" aria-hidden="true">#</a> Scope Chain</h2><p>JavaScript 的三种作用域</p><ul><li>全局作用域</li><li>函数作用域</li><li>eval 作用域</li><li>try-catch 作用域</li><li>块级作用域</li></ul><p>里面声明的变量不能被外部访问</p><p>作用域(scope)</p><p>作用域链(scope chain)</p><h2 id="execution-stack"><a class="header-anchor" href="#execution-stack" aria-hidden="true">#</a> Execution Stack</h2><ul><li>stack exceed error</li></ul><p>each function call creates a new execution context</p><p>to stages to create a execution context by js interpreter</p><p>函数和变量是有区别的</p><div class="language-js"><pre><code><span class="token comment">// 两种写法一样么</span>\n\n</code></pre></div><p>函数和方法是有区别的</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token string">&#39;errr&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">90</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre></div><p>执行函数前，解释器先扫描一遍函数内部, 仅定义，而未赋值</p><ol><li>创建阶段</li></ol><ul><li>创建 scope chain</li><li>创建 variables functions and arguments</li><li>determine the value of ‘this’</li></ul><ol start="2"><li>激活、代码执行阶段</li></ol><ul><li>给变量赋值、执行代码</li></ul><p>执行上下文可抽象成</p><div class="language-js"><pre><code>executionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* variableObject + all parent execution context&#39;s variableObject */</span>\n  <span class="token string">&#39;scopeChain&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">/* function arguments / parame ters, inner variable and function declarations */</span>\n  <span class="token string">&#39;variableObject&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      arguments<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">0</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n        length<span class="token operator">:</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      f<span class="token operator">:</span>  <span class="token comment">// pointer to the function</span>\n      <span class="token operator">...</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;this&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="variable-environment"><a class="header-anchor" href="#variable-environment" aria-hidden="true">#</a> variable environment</h3><h3 id="lexical-environment"><a class="header-anchor" href="#lexical-environment" aria-hidden="true">#</a> lexical environment</h3><blockquote><p><a href="https://medium.com/@itIsMadhavan/what-is-the-execution-context-stack-in-javascript-e169812e851a" target="_blank" rel="noopener noreferrer">https://medium.com/@itIsMadhavan/what-is-the-execution-context-stack-in-javascript-e169812e851a</a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#this_in_function_contexts" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#this_in_function_contexts</a></p></blockquote>',35);e.render=function(s,t,e,p,c,i){return n(),a("div",null,[o])};export default e;export{t as __pageData};
