import{o as n,c as a,d as s}from"./app.59f5dd45.js";const t='{"title":"java 注解","description":"","frontmatter":{"title":"java 注解"},"headers":[{"level":2,"title":"文档类注解","slug":"文档类注解"},{"level":2,"title":"jdk 内置注解","slug":"jdk-内置注解"},{"level":2,"title":"自定义注解","slug":"自定义注解"},{"level":2,"title":"元注解","slug":"元注解"},{"level":3,"title":"Retention","slug":"retention"},{"level":3,"title":"Target","slug":"target"},{"level":3,"title":"Documented","slug":"documented"},{"level":3,"title":"Inherited","slug":"inherited"},{"level":2,"title":"可重复注解","slug":"可重复注解"},{"level":2,"title":"类型注解","slug":"类型注解"}],"relativePath":"java/annotation.md","lastUpdated":1615022450675}',p={},o=s('<p>jdk 5.0 增加里最元数据（Meta Data）的支持。在不改变原有逻辑的基础上，在源文件中嵌入一些补充信息</p><p>可用于修饰 包、类、构造器、方法、成员变量、参数、局部变量的声明，替代冗余的代码和 XML 配置</p><p>基本上：框架 = 注解 + 反射 + 设计模式</p><h2 id="文档类注解"><a class="header-anchor" href="#文档类注解" aria-hidden="true">#</a> 文档类注解</h2><div class="language-java"><pre><code><span class="token comment">/**\n * @author zz,xx\n * @version 1.0.1\n * @see\n * @since\n * @param\n */</span>\n</code></pre></div><h2 id="jdk-内置注解"><a class="header-anchor" href="#jdk-内置注解" aria-hidden="true">#</a> jdk 内置注解</h2><p>在编译时进行格式检查</p><ul><li>@Override ：限定重写父类、接口中的方法</li><li>@Deprecated ：修饰类、方法（向下兼容）</li><li>@SuppressWarnings ：抑制编译器警告</li></ul><h2 id="自定义注解"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h2><p>需要配上注解的信息处理流程（使用反射）才有意义</p><div class="language-java"><pre><code><span class="token comment">// 声明注解</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义内容成员及默认值</span>\n  <span class="token comment">// 如果没有成员，则表示标识作用</span>\n  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用默认值</span>\n<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="元注解"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h2><p>用于修饰其他注解，jdk 5.0 提供 4 个</p><h3 id="retention"><a class="header-anchor" href="#retention" aria-hidden="true">#</a> Retention</h3><p>指定被修饰的 Annotation 的生命周期 SOURCE/CLASS(默认)/RUNTIME</p><div class="language-java"><pre><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="target"><a class="header-anchor" href="#target" aria-hidden="true">#</a> Target</h3><p>指定被修饰的 Annotation 能修饰那些程序元素</p><div class="language-java"><pre><code><span class="token comment">// 指定 MyAnnotation 只能修饰类、构造器</span>\n<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="documented"><a class="header-anchor" href="#documented" aria-hidden="true">#</a> Documented</h3><p>被修饰的 Annotation 在 javadoc 解析时，能保留下来</p><div class="language-java"><pre><code><span class="token annotation punctuation">@Documented</span>\n<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span>CONSTRUCTOR<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PACKAGE<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Deprecated</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="inherited"><a class="header-anchor" href="#inherited" aria-hidden="true">#</a> Inherited</h3><p>被修饰的 Annotation 将具有继承性，子类继承父类注解</p><div class="language-java"><pre><code><span class="token annotation punctuation">@Inherited</span>\n<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> getAnnotations <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="可重复注解"><a class="header-anchor" href="#可重复注解" aria-hidden="true">#</a> 可重复注解</h2><p>jdk 8</p><div class="language-java"><pre><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">{</span>\n  <span class="token class-name">MyAnnotation</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 写多个重复类型的注解</span>\n<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><p>⚠️ ：MyAnnotation MyAnnotations 要保持 @Inherited @Retention 和 @Target 等元注解相同</p><h2 id="类型注解"><a class="header-anchor" href="#类型注解" aria-hidden="true">#</a> 类型注解</h2><p>jdk 1.8</p><p>表示该注解可以写在类型变量的生命语句中，比如泛型</p><div class="language-java"><pre><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE_PARAMETER<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span>  <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token operator">&lt;</span> <span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span> <span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">10L</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',33);p.render=function(s,t,p,e,c,l){return n(),a("div",null,[o])};export default p;export{t as __pageData};
