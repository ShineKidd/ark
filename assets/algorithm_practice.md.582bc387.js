import{_ as n,c as s,o as a,b as t}from"./app.8a965c85.js";const _='{"title":"\u6392\u5E8F","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6392\u5E8F","slug":"\u6392\u5E8F"},{"level":3,"title":"\u5192\u6CE1","slug":"\u5192\u6CE1"},{"level":3,"title":"\u5FEB\u6392","slug":"\u5FEB\u6392"},{"level":2,"title":"\u5B57\u7B26\u4E32","slug":"\u5B57\u7B26\u4E32"},{"level":3,"title":"\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32\uFF0C\u627E\u51FA\u5B83\u4EEC\u4E4B\u95F4\u6700\u5927\u76F8\u540C\u5B50\u4E32","slug":"\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32\uFF0C\u627E\u51FA\u5B83\u4EEC\u4E4B\u95F4\u6700\u5927\u76F8\u540C\u5B50\u4E32"}],"relativePath":"algorithm/practice.md","lastUpdated":1636636929337}',p={},e=t(`<h2 id="\u6392\u5E8F" tabindex="-1">\u6392\u5E8F <a class="header-anchor" href="#\u6392\u5E8F" aria-hidden="true">#</a></h2><h3 id="\u5192\u6CE1" tabindex="-1">\u5192\u6CE1 <a class="header-anchor" href="#\u5192\u6CE1" aria-hidden="true">#</a></h3><h3 id="\u5FEB\u6392" tabindex="-1">\u5FEB\u6392 <a class="header-anchor" href="#\u5FEB\u6392" aria-hidden="true">#</a></h3><h2 id="\u5B57\u7B26\u4E32" tabindex="-1">\u5B57\u7B26\u4E32 <a class="header-anchor" href="#\u5B57\u7B26\u4E32" aria-hidden="true">#</a></h2><h3 id="\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32\uFF0C\u627E\u51FA\u5B83\u4EEC\u4E4B\u95F4\u6700\u5927\u76F8\u540C\u5B50\u4E32" tabindex="-1">\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32\uFF0C\u627E\u51FA\u5B83\u4EEC\u4E4B\u95F4\u6700\u5927\u76F8\u540C\u5B50\u4E32 <a class="header-anchor" href="#\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32\uFF0C\u627E\u51FA\u5B83\u4EEC\u4E4B\u95F4\u6700\u5927\u76F8\u540C\u5B50\u4E32" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">getMaxSubStr</span> <span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> maxStr<span class="token punctuation">,</span> subStr
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">&gt;</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    maxStr <span class="token operator">=</span> str1
    subStr <span class="token operator">=</span> str2
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    maxStr <span class="token operator">=</span> str2
    subStr <span class="token operator">=</span> str1
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> subStrLen <span class="token operator">=</span> subStr<span class="token punctuation">.</span>length
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subStrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u79FB\u52A8\u5934\u5C3E\u6307\u9488</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> subStrLen <span class="token operator">-</span> i
    <span class="token keyword">while</span><span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> subStrLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> currStr <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>maxStr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> currStr
      <span class="token punctuation">}</span>
      start<span class="token operator">++</span>
      end<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMaxSubStr</span><span class="token punctuation">(</span><span class="token string">&#39;abcdabce&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,6),o=[e];function c(r,l,u,i,k,d){return a(),s("div",null,o)}var S=n(p,[["render",c]]);export{_ as __pageData,S as default};
