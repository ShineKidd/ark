import{o as e,c as t,d as p}from"./app.e1a4a42a.js";const a='{"title":"vue 性能优化","description":"","frontmatter":{"title":"vue 性能优化"},"headers":[{"level":3,"title":"优化点：","slug":"优化点："},{"level":3,"title":"SSR Vs 同构","slug":"ssr-vs-同构"}],"relativePath":"javascript/performance-vue.md","lastUpdated":1617458194751}',r={},i=p('<p>问题：单页应用，加载速度慢，首页白屏时间长</p><p>Document Content Load</p><p>First Paint ==&gt; <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 骨架屏</p><p>First Contentful Paint ==&gt; 静态 dom 生成</p><p>First Meaningful Paint ==&gt; ajax 数据回来</p><p>Time To Interactive</p><p>(Largest Contentful Paint)</p><h3 id="优化点："><a class="header-anchor" href="#优化点：" aria-hidden="true">#</a> 优化点：</h3><ol><li>v-for</li></ol><p>如果页面有交互出发列表变化，需要指定唯一的 key 值</p><ol start="2"><li>keep-alive</li></ol><p>include 属性设置要缓存的组件名</p><ol start="3"><li><p>按需引入组件</p></li><li><p>路由分割</p></li></ol><h3 id="ssr-vs-同构"><a class="header-anchor" href="#ssr-vs-同构" aria-hidden="true">#</a> SSR Vs 同构</h3><p>SSR 服务端渲染（php、jsp）</p><p>预渲染：通过无头浏览器预先执行代码，生成 html 内容（骨架屏）</p><p>同构：一套代码客户端，服务端同时使用（vue、react、nuxt）中间 node 层预渲染页面（并发时服务压力大）</p><p>cdn 请求时间片</p><p>quickLink</p><p>DNS: dns-preftch preconnect</p><p>prefetch preload prerender</p>',21);r.render=function(p,a,r,l,n,s){return e(),t("div",null,[i])};export default r;export{a as __pageData};
