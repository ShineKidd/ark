import{o as n,c as s,d as a}from"./app.2a3e59c4.js";const t='{"title":"Execution Context","description":"","frontmatter":{"title":"Execution Context"},"headers":[{"level":2,"title":"Concepts","slug":"concepts"},{"level":2,"title":"Scope","slug":"scope"},{"level":3,"title":"Hoisting","slug":"hoisting"},{"level":3,"title":"Scope Chain","slug":"scope-chain"},{"level":2,"title":"This","slug":"this"},{"level":3,"title":"var let const","slug":"var-let-const"},{"level":2,"title":"Scope Chain","slug":"scope-chain-2"},{"level":2,"title":"Execution Stack","slug":"execution-stack"},{"level":3,"title":"variable environment","slug":"variable-environment"},{"level":3,"title":"lexical environment","slug":"lexical-environment"},{"level":2,"title":"closure","slug":"closure"}],"relativePath":"javascript/execution-context.md","lastUpdated":1620573299631}',p={},o=a('<h2 id="concepts"><a class="header-anchor" href="#concepts" aria-hidden="true">#</a> Concepts</h2><p><strong>JavaScript 是「弱类型」「动态」语言</strong></p><div class="language-js"><pre><code><span class="token comment">// 隐式类型转换</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\nbar <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token comment">// 在运行过程中才检查数据类型</span>\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>JavaScript (目前)有 8 种数据类型</strong></p><div class="language-js"><pre><code>Number String Boolean Symbol BigInt Object <span class="token keyword">null</span> <span class="token keyword">undefined</span>\n</code></pre></div><p><strong>JavaScript 执行前需要编译</strong></p><p>词法分析、语法解析、代码优化、代码生成</p><h2 id="scope"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> Scope</h2><p><strong>什么是作用域</strong></p><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</p><p><strong>4 (主要的)种作用域</strong></p><p>全局作用域 &amp; 函数作用域</p><div class="language-js"><pre><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">123</span>\n    bar <span class="token operator">=</span> <span class="token number">456</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> doc<span class="token punctuation">,</span> <span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n      bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; 123 456</span>\n<span class="token comment">// =&gt; undefined</span>\n</code></pre></div><p>ES6 块级作用域</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; undefined</span>\n<span class="token comment">// =&gt; 0</span>\n<span class="token comment">// =&gt; 1</span>\n<span class="token comment">// =&gt; 2</span>\n</code></pre></div><p>eval 作用域</p><div class="language-js"><pre><code><span class="token string">&#39;use strict&#39;</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  var bar = &#39;foo&#39;\n  console.log(bar)\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; foo</span>\n<span class="token comment">// =&gt; bar</span>\n<span class="token comment">// =&gt; undefined</span>\n</code></pre></div><h3 id="hoisting"><a class="header-anchor" href="#hoisting" aria-hidden="true">#</a> Hoisting</h3><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n<span class="token comment">// -----</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// ---</span>\n</code></pre></div><p>在 if 语句中定义的函数</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token comment">// undefined true</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo ~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: foo is not a function</span>\n</code></pre></div><h3 id="scope-chain"><a class="header-anchor" href="#scope-chain" aria-hidden="true">#</a> Scope Chain</h3><p><strong>结论</strong></p><ul><li>在 if 代码块中，避免用声明式定义函数</li><li>一段代码如果定义了两个相同名字的函数，那么最终生效的是最后一个函数</li><li><code>var</code> <code>function</code> 声明的变量，存在变量提升的现象</li><li></li></ul><p>var 声明的变量和 function 声明的函数</p><h2 id="this"><a class="header-anchor" href="#this" aria-hidden="true">#</a> This</h2><p>runtime binding</p><h3 id="var-let-const"><a class="header-anchor" href="#var-let-const" aria-hidden="true">#</a> var let const</h3><p>var 存在着变量覆盖、变量污染</p><p>三者是如何并存的？</p><p>块级作用域就是通过词法环境的栈结构来实现的，而变量提升是通过变量环境来实现，通过这两者的结合，JavaScript引擎也就同时支持了变量提升和块级作用域了。</p><h2 id="scope-chain-2"><a class="header-anchor" href="#scope-chain-2" aria-hidden="true">#</a> Scope Chain</h2><p>JavaScript 的三种作用域</p><ul><li>全局作用域</li><li>函数作用域</li><li>eval 作用域</li><li>try-catch 作用域</li><li>块级作用域</li></ul><p>里面声明的变量不能被外部访问</p><div class="language-js"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;f&#39;</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>作用域(scope)</p><p>作用域链(scope chain)</p><p>调用栈就是用来管理函数调用关系的一种数据结构。因此要讲清楚调用栈，你还要先弄明白函数调用和栈结构</p><p>当使用eval函数的时候，eval的代码也会被编译，并创建执行上下文。</p><h2 id="execution-stack"><a class="header-anchor" href="#execution-stack" aria-hidden="true">#</a> Execution Stack</h2><ul><li>stack exceed error</li></ul><p>each function call creates a new execution context</p><p>to stages to create a execution context by js interpreter</p><p>函数和变量是有区别的</p><div class="language-js"><pre><code><span class="token comment">// 两种写法一样么</span>\n\n</code></pre></div><p>函数和方法是有区别的</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token string">&#39;errr&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">90</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre></div><p>执行函数前，解释器先扫描一遍函数内部, 仅定义，而未赋值</p><ol><li>创建阶段</li></ol><ul><li>创建 scope chain</li><li>创建 variables functions and arguments</li><li>determine the value of ‘this’</li></ul><ol start="2"><li>激活、代码执行阶段</li></ol><ul><li>给变量赋值、执行代码</li></ul><p>执行上下文可抽象成</p><div class="language-js"><pre><code>executionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* variableObject + all parent execution context&#39;s variableObject */</span>\n  <span class="token string">&#39;scopeChain&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">/* function arguments / parame ters, inner variable and function declarations */</span>\n  <span class="token string">&#39;variableObject&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      arguments<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">0</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n        length<span class="token operator">:</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      f<span class="token operator">:</span>  <span class="token comment">// pointer to the function</span>\n      <span class="token operator">...</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;this&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="variable-environment"><a class="header-anchor" href="#variable-environment" aria-hidden="true">#</a> variable environment</h3><h3 id="lexical-environment"><a class="header-anchor" href="#lexical-environment" aria-hidden="true">#</a> lexical environment</h3><p>在编译阶段生成</p><h2 id="closure"><a class="header-anchor" href="#closure" aria-hidden="true">#</a> closure</h2><blockquote><p><a href="https://medium.com/@itIsMadhavan/what-is-the-execution-context-stack-in-javascript-e169812e851a" target="_blank" rel="noopener noreferrer">What is the Execution Context &amp; Stack in JavaScript?</a></p></blockquote><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#this_in_function_contexts" target="_blank" rel="noopener noreferrer">this</a></p></blockquote><blockquote><p><a href="https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/" target="_blank" rel="noopener noreferrer">Gentle Explanation of &quot;this&quot; in JavaScript</a></p></blockquote>',63);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
