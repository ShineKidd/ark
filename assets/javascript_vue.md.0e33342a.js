import{o as n,c as a,d as s}from"./app.e1a4a42a.js";const t='{"title":"vue vue-router vuex","description":"","frontmatter":{"title":"vue vue-router vuex"},"headers":[{"level":2,"title":"vue","slug":"vue"},{"level":3,"title":"jsx","slug":"jsx"},{"level":3,"title":"函数式组件","slug":"函数式组件"},{"level":2,"title":"vuex","slug":"vuex"},{"level":3,"title":"动态注入 modlue","slug":"动态注入-modlue"},{"level":2,"title":"vue-router","slug":"vue-router"},{"level":3,"title":"路由异步组件的实现","slug":"路由异步组件的实现"},{"level":3,"title":"如何重置路由","slug":"如何重置路由"}],"relativePath":"javascript/vue.md","lastUpdated":1617458194751}',p={},o=s('<h2 id="vue"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> vue</h2><h3 id="jsx"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> jsx</h3><h3 id="函数式组件"><a class="header-anchor" href="#函数式组件" aria-hidden="true">#</a> 函数式组件</h3><h2 id="vuex"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h2><h3 id="动态注入-modlue"><a class="header-anchor" href="#动态注入-modlue" aria-hidden="true">#</a> 动态注入 modlue</h3><h2 id="vue-router"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> vue-router</h2><h3 id="路由异步组件的实现"><a class="header-anchor" href="#路由异步组件的实现" aria-hidden="true">#</a> 路由异步组件的实现</h3><blockquote><p><a href="https://marskid.net/2018/11/11/vue-router-lazy-loading/" target="_blank" rel="noopener noreferrer">https://marskid.net/2018/11/11/vue-router-lazy-loading/</a></p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> LoadingView <span class="token operator">=</span> <span class="token punctuation">{</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Loading...&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ErrorView <span class="token operator">=</span> <span class="token punctuation">{</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Unexception Error&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createLazy</span> <span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">View</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    component<span class="token punctuation">,</span>\n    loading<span class="token operator">:</span> LoadingView<span class="token punctuation">,</span>\n    error<span class="token operator">:</span> ErrorView<span class="token punctuation">,</span>\n    delay<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    timeout<span class="token operator">:</span> <span class="token number">3000</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>View<span class="token punctuation">,</span> data<span class="token punctuation">,</span> chilren<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createLazy</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/user/index.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h3 id="如何重置路由"><a class="header-anchor" href="#如何重置路由" aria-hidden="true">#</a> 如何重置路由</h3><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">createRouter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    routes<span class="token punctuation">,</span>\n    <span class="token function">scrollBehavior</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">resetRouter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newRouter <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  router<span class="token punctuation">.</span>matcher <span class="token operator">=</span> newRouter<span class="token punctuation">.</span>matcher\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',11);p.render=function(s,t,p,e,c,u){return n(),a("div",null,[o])};export default p;export{t as __pageData};
